#!/usr/bin/env python3
import subprocess
import os
from executioner import execute

"""
/www Initial Setup

This script sets up the initial /www
directory structure for charlesreid1.com
content. (Or, charlesreid1.XYZ, whatever.)
"""

SERVER_NAME_DEFAULT = '{{ server_name_default }}'
USERNAME = '{{ username }}'



# Set repo urls
### # Use git.charlesreid1.com to clone charlesreid1.com content
### repourl = "https://git.charlesreid1.com/charlesreid1/charlesreid1.com.git"
#
# Use github.com to clone charlesreid1.com content
repourl = "https://github.com/charlesreid1-docker/charlesreid1.com.git"

# Set directory locations
root = '/www'
basedir = os.path.join(root,SERVER_NAME_DEFAULT)
htdocsdir = os.path.join(basedir,'htdocs')
dotgitdir = os.path.join(basedir,'git.htdocs')

# Start by making sure the base directory exists
subprocess.call(['mkdir','-p',basedir])

# Run the clone command, but only if there is no dot git directory yet
# /www/SERVER_NAME_DEFAULT/htdocs 
if not os.path.exists(dotgitdir):

    if os.path.exists(htdocsdir):
        # an htdocs dir with no dot git dir?
        # this must be some kind of mistake.
        subprocess.call(['rm','-fr',htdocsdir])

    # Clone htdocs folder for SERVER_NAME_DEFAULT
    clonecmd = ['git','clone',
                '--separate-git-dir=%s'%(dotgitdir),
                '-b','gh-pages',
                repourl, htdocsdir]

    print("About to clone /www content for %s using command:\n"%(SERVER_NAME_DEFAULT))
    print("    $ " + " ".join(clonecmd))
    print("\n")

    print("Command Output:")
    for loo in execute(pullcmd):
        print(loo)
    print("\n")

    print("Done.")


# Step 2: chown everybody
# Construct chown command
chowncmd = ['chown','-R',
            USERNAME+":"+USERNAME,
            basedir]

print("About to chown /www directory using command:\n")
print("    $ " + " ".join(chowncmd))
print("\n")

print("Command Output:")
for loo in execute(chowncmd):
    print(loo)
print("\n")

print("Done.")

