#!/usr/bin/env python3
import subprocess
import os

"""
/www Pull Script 

This script updates the /www
directory structure for charlesreid1.com
content. (Or, charlesreid1.XYZ, whatever.)
"""

SERVER_NAME_DEFAULT = '{{ server_name_default }}'
USERNAME = '{{ username }}'



# Set directory locations
root = '/www'
basedir = os.path.join(root,SERVER_NAME_DEFAULT)
htdocsdir = os.path.join(basedir,'htdocs')
datadir   = os.path.join(basedir,'htdocs','data')
dotgitdir = os.path.join(basedir,'git.data')

# Start by making sure the base directory exists
subprocess.call(['mkdir','-p',basedir])

# Run the pull command, but only if 
# the htdocs/data dir already exists
# /www/<domain>/htdocs/data
if os.path.exists(datadir):

    pullcmd = ['git',
               '-C',basedir,
               '--git-dir=%s'%(dotgitdir),
               '--work-tree=%s'%(datadir),
               'pull','origin','gh-pages']

    print("About to pull /www data content for %s using command:\n"%(SERVER_NAME_DEFAULT))
    print("    $ " + " ".join(clonecmd))
    print("\n")
    try:
        p = subprocess.Popen(clonecmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        msg = "Something went wrong with the pull command. Output:"
        msg += "\n"
        msg += p.stdout.readline()
        msg += "\n"
        msg += p.stderr.readline()
        print(msg)
    finally:
        print("Done.")



# Step 2: chown everybody
# Construct chown command
chowncmd = ['chown','-R',
            USERNAME+":"+USERNAME,
            basedir]

print("About to chown /www directory using command:\n")
print("    $ " + " ".join(chowncmd))
print("\n")
try:
    p = subprocess.Popen(chowncmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
except:
    msg = "Something went wrong with the chown command. Output:"
    msg += "\n"
    msg += p.stdout.readline()
    msg += "\n"
    msg += p.stderr.readline()
    print(msg)
finally:
    print("Done.")

